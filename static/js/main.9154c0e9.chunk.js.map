{"version":3,"sources":["utils/getUser.js","utils/webSocket.js","components/Header/Header.tsx","components/CreateRoom/CreateRoom.tsx","components/RoomsList/RoomsList.tsx","components/SendMessage/SendMessage.tsx","components/Messages/Messages.tsx","components/Modal/Modal.tsx","components/Loader/Loader.tsx","components/ErrorModal/ErrorModal.tsx","components/App.tsx","index.tsx"],"names":["getUser","storage","localStorage","getItem","JSON","parse","socket","WebSocket","Header","room","setLoading","userId","id","useState","isRename","setIsRename","isDelete","setIsDelete","newTitle","setNewTitle","title","setTitle","inputRef","useRef","useEffect","handleOpenRenameForm","a","current","focus","className","author","onSubmit","event","preventDefault","trim","message","action","roomId","send","stringify","ref","type","placeholder","value","onChange","target","onClick","CreateRoom","RoomsList","roomsList","selectedRoom","map","classNames","handlerSetRoom","SendMessage","user","text","setText","name","date","Date","now","Messages","messages","scrollableBlockRef","scrollIntoView","block","dateData","format","messages__client","Modal","setName","typeof","Loader","ErrorModal","setErrorMessage","errorMessage","App","setUser","isModal","setIsModal","setRoomsList","setMessages","setRoom","loading","onopen","onmessage","resData","data","userData","setItem","rooms","console","error","onclose","onerror","close","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9154c0e9.chunk.js","sourcesContent":["export function getUser() {\n  const storage = localStorage.getItem('vlkzmn_chat_user');\n\n  return JSON.parse(storage);\n}\n","const API_URL = 'wss://chat-api-kmfo.onrender.com';\n// const API_URL = 'ws://localhost:5000';\n\nexport const socket = new WebSocket(API_URL);\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n} from 'react';\n\nimport './Header.scss';\nimport 'bulma/css/bulma.css';\n\nimport { Room } from '../../types/Room';\nimport { getUser } from '../../utils/getUser';\nimport { socket } from '../../utils/webSocket';\n\ntype Props = {\n  room: Room | null,\n  setLoading: (value: boolean) => void,\n};\n\nexport const Header: React.FC<Props> = ({ room, setLoading }) => {\n  const userId = getUser().id;\n  const [isRename, setIsRename] = useState(false);\n  const [isDelete, setIsDelete] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n  const [title, setTitle] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (room?.title) {\n      setTitle(room?.title);\n    }\n\n    setIsDelete(false);\n    setIsRename(false);\n    setNewTitle('');\n  }, [room]);\n\n  const handlerDeleteRoom = () => {\n    const message = {\n      action: 'deleteRoom',\n      roomId: room?.id,\n    };\n\n    setLoading(true);\n\n    socket.send(JSON.stringify(message));\n\n    setIsDelete(false);\n  };\n\n  const handlerRenameRoom = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newTitle.trim()) {\n      inputRef.current?.focus();\n      setNewTitle('');\n\n      return;\n    }\n\n    const message = {\n      action: 'renameRoom',\n      roomId: room?.id,\n      newTitle,\n    };\n\n    setLoading(true);\n\n    socket.send(JSON.stringify(message));\n\n    setIsRename(false);\n    setNewTitle('');\n  };\n\n  const handlerCancelRenameRoom = () => {\n    setIsRename(false);\n    setNewTitle('');\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleOpenRenameForm = async () => {\n    await setIsRename(true);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"header\">\n      <h1 className=\"header__title\">{title}</h1>\n\n      {userId === room?.author && (\n        <div className=\"header__buttons\">\n\n          {isRename && (\n            <>\n              <form className=\"header__form\" onSubmit={handlerRenameRoom}>\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  className=\"input\"\n                  placeholder=\"Enter new name\"\n                  value={newTitle}\n                  onChange={handleInputChange}\n                />\n\n                <button\n                  type=\"submit\"\n                  className=\"button\"\n                >\n                  Confirm\n                </button>\n              </form>\n\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={handlerCancelRenameRoom}\n              >\n                Cancel\n              </button>\n            </>\n          )}\n\n          {isDelete && (\n            <>\n              <div className=\"header__buttons--danger\">\n                Are you sure?\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={handlerDeleteRoom}\n              >\n                Confirm Delete\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setIsDelete(false)}\n              >\n                Cancel\n              </button>\n            </>\n          )}\n\n          {!isRename && !isDelete && (\n            <>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={handleOpenRenameForm}\n              >\n                Rename Room\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setIsDelete(true)}\n              >\n                Delete Room\n              </button>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useRef } from 'react';\n\nimport './CreateRoom.scss';\nimport 'bulma/css/bulma.css';\n\nimport { socket } from '../../utils/webSocket';\nimport { getUser } from '../../utils/getUser';\n\ntype Props = {\n  setLoading: (value: boolean) => void,\n};\n\nexport const CreateRoom: React.FC<Props> = ({ setLoading }) => {\n  const [title, setTitle] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleCreateRoom = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setTitle('');\n      inputRef.current?.focus();\n\n      return;\n    }\n\n    const userId = getUser().id;\n    const message = {\n      action: 'createRoom',\n      title,\n      userId,\n    };\n\n    setLoading(true);\n\n    socket.send(JSON.stringify(message));\n\n    setTitle('');\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  return (\n    <form className=\"create\" onSubmit={handleCreateRoom}>\n      <input\n        ref={inputRef}\n        className=\"input\"\n        placeholder=\"Enter new room name\"\n        value={title}\n        onChange={handleInputChange}\n      />\n\n      <button\n        type=\"submit\"\n        className=\"button\"\n      >\n        Create New Room\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './RoomsList.scss';\nimport 'bulma/css/bulma.css';\n\nimport { Room } from '../../types/Room';\nimport { socket } from '../../utils/webSocket';\n\ntype Props = {\n  roomsList: Room[],\n  selectedRoom: Room | null,\n  setLoading: (value: boolean) => void,\n};\n\nexport const RoomsList: React.FC<Props> = ({ roomsList, selectedRoom, setLoading }) => {\n  const handlerSetRoom = (room: Room) => {\n    const message = {\n      action: 'chooseRoom',\n      id: room.id,\n    };\n\n    setLoading(true);\n\n    socket.send(JSON.stringify(message));\n  };\n\n  return (\n    <div className=\"rooms_list\">\n      {roomsList.map(room => {\n        return (\n          <button\n            key={room.id}\n            type=\"button\"\n            className={classNames(\n              'button is-white rooms_list__button',\n              { 'is-info': room.id === selectedRoom?.id },\n            )}\n            onClick={() => handlerSetRoom(room)}\n          >\n            {room.title}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport './SendMessage.scss';\nimport 'bulma/css/bulma.css';\n\nimport { socket } from '../../utils/webSocket';\nimport { Room } from '../../types/Room';\nimport { User } from '../../types/User';\n\ntype Props = {\n  room: Room | null,\n  user: User,\n};\n\nexport const SendMessage: React.FC<Props> = ({ room, user }) => {\n  const [text, setText] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, [room]);\n\n  const handleSendMessage = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!text.trim()) {\n      inputRef.current?.focus();\n      setText('');\n\n      return;\n    }\n\n    const message = {\n      action: 'newMessage',\n      roomId: room?.id,\n      author: user.name,\n      date: Date.now(),\n      text,\n    };\n\n    socket.send(JSON.stringify(message));\n\n    setText('');\n    inputRef.current?.focus();\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <form className=\"send_message\" onSubmit={handleSendMessage}>\n      <input\n        className=\"input\"\n        ref={inputRef}\n        placeholder=\"Message\"\n        value={text}\n        onChange={handleInputChange}\n      />\n\n      <button type=\"submit\" className=\"button\">\n        Send\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { format } from 'date-fns';\n\nimport './Messages.scss';\nimport 'bulma/css/bulma.css';\n\nimport { Message } from '../../types/Message';\nimport { User } from '../../types/User';\n\ntype Props = {\n  messages: Message[],\n  user: User,\n};\n\nexport const Messages: React.FC<Props> = ({ messages, user }) => {\n  const scrollableBlockRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollableBlockRef.current) {\n      scrollableBlockRef.current.scrollIntoView({ block: 'end' });\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"messages\">\n      <div className=\"messages__content\">\n        {messages.map(message => {\n          const dateData = new Date(message.date);\n          const date = format(dateData, 'dd-MM-yyyy HH:mm');\n\n          return (\n            <div\n              key={message.date}\n              className={\n                classNames(\n                  'box messages__box',\n                  { messages__client: message.author === user.name },\n                )\n              }\n            >\n              <div className=\"messages__name\">\n                {message.author}\n              </div>\n\n              {message.text}\n\n              <div className=\"messages__time\">\n                {date}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div id=\"box\" ref={scrollableBlockRef} />\n    </div>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport './Modal.scss';\nimport 'bulma/css/bulma.css';\n\nimport { socket } from '../../utils/webSocket';\n\ntype Props = {\n  setLoading: (value: boolean) => void,\n};\n\nexport const Modal: React.FC<Props> = ({ setLoading }) => {\n  const [name, setName] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim()) {\n      inputRef.current?.focus();\n      setName('');\n\n      return;\n    }\n\n    const message = {\n      action: 'registration',\n      name: name.trim(),\n    };\n\n    setLoading(true);\n    socket.send(JSON.stringify(message));\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" />\n\n      <div className=\"modal-content\">\n        <div className=\"box box-modal\">\n          <h1 className=\"box-title\">\n            Welcome to Chat!\n          </h1>\n\n          <p className=\"box-text\">\n            For join enter yor name\n          </p>\n\n          <form className=\"field box-field\" onSubmit={handleSubmit}>\n            <div className=\"control\">\n              <input\n                ref={inputRef}\n                className=\"input\"\n                typeof=\"text\"\n                placeholder=\"Your name\"\n                value={name}\n                onChange={handleInputChange}\n              />\n            </div>\n\n            <button type=\"submit\" className=\"button is-success\">\n              Join\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './Loader.scss';\nimport 'bulma/css/bulma.css';\n\nexport const Loader: React.FC = () => {\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"loader\" />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './ErrorModal.scss';\nimport 'bulma/css/bulma.css';\n\ntype Props = {\n  setErrorMessage: (value: string) => void,\n  errorMessage: string,\n};\n\nexport const ErrorModal: React.FC<Props> = ({ setErrorMessage, errorMessage }) => {\n  // const [name, setName] = useState('');\n  // const inputRef = useRef<HTMLInputElement>(null);\n\n  // useEffect(() => {\n  //   inputRef.current?.focus();\n  // }, []);\n\n  // const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n  //   event.preventDefault();\n\n  //   if (!name.trim()) {\n  //     inputRef.current?.focus();\n  //     setName('');\n\n  //     return;\n  //   }\n\n  //   const message = {\n  //     action: 'registration',\n  //     name: name.trim(),\n  //   };\n\n  //   setLoading(true);\n  //   socket.send(JSON.stringify(message));\n  // };\n\n  // const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   setName(event.target.value);\n  // };\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" />\n\n      <div className=\"modal-content\">\n        <div className=\"box box-modal\">\n          <h1 className=\"box-title\">\n            Error!\n          </h1>\n\n          <p className=\"box-text\">\n            {errorMessage}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"button is-danger\"\n            onClick={() => setErrorMessage('')}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\n\nimport './App.scss';\n\nimport { Header } from './Header/Header';\nimport { CreateRoom } from './CreateRoom/CreateRoom';\nimport { RoomsList } from './RoomsList/RoomsList';\nimport { SendMessage } from './SendMessage/SendMessage';\nimport { Messages } from './Messages/Messages';\nimport { Modal } from './Modal/Modal';\nimport { socket } from '../utils/webSocket';\nimport { Room } from '../types/Room';\nimport { Message } from '../types/Message';\nimport { getUser } from '../utils/getUser';\nimport { Loader } from './Loader/Loader';\nimport { ErrorModal } from './ErrorModal/ErrorModal';\n\nexport const App: React.FC = () => {\n  const [user, setUser] = useState(getUser());\n  const [isModal, setIsModal] = useState(!user);\n  const [roomsList, setRoomsList] = useState<Room[]>([]);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [room, setRoom] = useState<Room | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    if (user) {\n      setLoading(true);\n\n      socket.onopen = () => {\n        socket.send(JSON.stringify({ action: 'askRoomsList' }));\n      };\n    }\n\n    socket.onmessage = (event) => {\n      const resData = JSON.parse(event.data);\n\n      switch (resData.action) {\n        case 'confirmation': {\n          setIsModal(false);\n\n          const userData = {\n            name: resData.name,\n            id: resData.id,\n          };\n\n          setUser(userData);\n\n          localStorage.setItem('vlkzmn_chat_user', JSON.stringify(userData));\n\n          socket.send(JSON.stringify({ action: 'askRoomsList' }));\n\n          break;\n        }\n\n        case 'roomsList': {\n          setRoomsList(resData.rooms);\n          setLoading(false);\n\n          break;\n        }\n\n        case 'messages': {\n          if (resData.messages) {\n            setMessages(resData.messages);\n          }\n\n          setRoom(resData.room);\n          setLoading(false);\n\n          break;\n        }\n\n        case 'newMessage': {\n          setMessages(current => [...current, resData.message]);\n\n          break;\n        }\n\n        case 'error': {\n          setErrorMessage(resData.message);\n          console.error(resData.error);\n\n          break;\n        }\n\n        default:\n      }\n    };\n\n    socket.onclose = () => {\n      setErrorMessage('Connection is break, try reload page');\n    };\n\n    socket.onerror = () => {\n      setErrorMessage('Error conection, try reload page');\n    };\n\n    return () => socket.close();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {loading && <Loader />}\n\n      {errorMessage && <ErrorModal errorMessage={errorMessage} setErrorMessage={setErrorMessage} />}\n\n      <div className=\"app__sidebar\">\n        <CreateRoom setLoading={setLoading} />\n\n        <RoomsList\n          roomsList={roomsList}\n          selectedRoom={room}\n          setLoading={setLoading}\n        />\n      </div>\n\n      <div className=\"app__main\">\n        {room && (\n          <>\n            <Header room={room} setLoading={setLoading} />\n            <Messages messages={messages} user={user} />\n            <SendMessage room={room} user={user} />\n          </>\n        )}\n      </div>\n\n      {isModal && <Modal setLoading={setLoading} />}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\n\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}